<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Logic Fundamental</title>
      <link href="/2022/01/15/logic/"/>
      <url>/2022/01/15/logic/</url>
      
        <content type="html"><![CDATA[<p>全称：<br>    所有 S R P<br>    所有 乌鸦 都是 黑色的<br>    任意自然数 x &gt; 0</p><p>特称：<br>    存在 S R P<br>    有一些 乌鸦 是 黑色的<br>    有些自然数 x &gt; 0</p><p>否-全称：<br>    存在 S IR P<br>    有一些 乌鸦 不是 黑色的<br>    有些自然数 x &lt;= 0</p><p>否-特称：<br>    所有 S IR P<br>    所有 乌鸦 都不是 黑色的<br>    全部自然数 x &lt;= 0</p><p>蕴含命题：<br>    对于任意一只鸟来说，如果它是乌鸦，那么它是黑的。<br>    一刮风，就下雨。<br>    任意一个数 x，如果 x 是自然数，那么 x &gt; 0。</p><p>反命题：<br>    对于任意一只鸟来说，如果它不是乌鸦，那么它不是黑的。<br>    不刮风，不下雨。<br>    任意一个数 x，如果 x 不是自然数，那么 x &lt;= 0。</p><p>逆命题：<br>    对于任意一只鸟来说，如果它是黑的，那么它是乌鸦。<br>    一下雨就刮风。<br>    任意一个数 x，如果 x &gt; 0，那么 x 是自然数。</p><p>逆反命题：<br>    对于任意一只鸟来说，如果它不是黑的，那么它不是乌鸦。<br>    不下雨就不刮风。<br>    任意一个数 x，如果 x &lt;= 0，那么 x 不是自然数。</p><p>否-蕴含命题：<br>    有/存在一只鸟，虽然它是乌鸦，但是它不是黑的。 (p and (not q))<br>    有时候虽然刮风但是不下雨。<br>    存在一个数 x，虽然 x 是自然数，但是 x &lt;= 0。</p><p>否-反命题：<br>    有/存在一只鸟，虽然它不是乌鸦，但是它是黑的。 (p and (not q))<br>    有时候虽然不刮风但是下雨。<br>    存在一个数 x，虽然 x 不是自然数，但是 x &gt; 0。</p><p>否-逆命题：<br>    有/存在一只鸟，虽然它是黑的，但是它不是乌鸦。 (p and (not q))<br>    有时候虽然下雨但是不刮风。<br>    存在一个数 x，虽然 x &gt; 0，但是 x 不是自然数。</p><p>否-逆反命题：<br>    有/存在一只鸟，虽然它不是黑色的，但是它是乌鸦。 (p and (not q))<br>    有时候虽然不下雨但是刮风。<br>    存在一个数 x，虽然 x &lt;= 0，但是 x 是自然数。</p><p>逻辑判断就是使用否命题规则来考虑命题的真假，尤其是蕴含命题的否定，肯定前件，否定后件就可以判假。<br>剩下的问题在于需要知道面对的命题，哪个是前件，哪个是后件，这样才可以使用肯定前件和否定后件的方式来判断。<br>例如，<br>    在中国，只有上海才有迪士尼公园。 这个命题因为没有如果… 那么…，所以看起来不像蕴含命题，而只有… 才… 可以改写如下<br>    在中国，如果有迪士尼公园，那么一定在上海。<br>    在中国，只有共产党在执政。-&gt; 在中国，如果有执政的，那么就是共产党。</p><p>充分条件命题<br>    其实就是蕴含命题，如果… 就…  只要… 就…  一旦… 就…   既然… 那么…  如果… 那么…<br>    判断时使用 否定后件或肯定前件 的方式</p><p>必要条件命题<br>    其实就是蕴含命题的逆命题，只有… 才…  要… 必须…  除非… 否则…<br>    判断时使用 否定前件或肯定后件 的方式<br>        只有天亮的时候，太阳才会出来。 &lt;=&gt; 如果太阳出来了，天就亮了。<br>        除非太阳从西边出来，否则你死定了。 &lt;=&gt; 只有太阳从西边出来，你才有可能不用死。 &lt;=&gt; 如果你不用死，那么太阳一定从西边出来了。</p><p>充要条件命题<br>    其实就是蕴含命题的前后件与逆命题前后件都成立，<br>        只有 p 就 q 且 只有 p 才 q</p>]]></content>
      
      
      
        <tags>
            
            <tag> logic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua C API Simple Guide</title>
      <link href="/2022/01/15/lua-c-api/"/>
      <url>/2022/01/15/lua-c-api/</url>
      
        <content type="html"><![CDATA[<h3 id="Why-we-need-Lua-C-API"><a href="#Why-we-need-Lua-C-API" class="headerlink" title="Why we need Lua C API?"></a>Why we need Lua C API?</h3><p>The answer is simple, we want to use the libraries written in C/C++ etc. These libraries make our lives easy. Another reason is that we want to let the others extend our application easily.</p><h3 id="How-to-use-Lua-C-API"><a href="#How-to-use-Lua-C-API" class="headerlink" title="How to use Lua C API?"></a>How to use Lua C API?</h3><p>First, we must know the Lua Stack mechanism.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua_pushnumber(L, number)</span><br><span class="line">lua_pushstring(L, <span class="string">"hello"</span>)</span><br><span class="line">lua_pushlightuserdata(L, &amp;f)</span><br></pre></td></tr></table></figure></p><p>The code above make the Stack like this<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    bottom</span><br><span class="line">- - - - - - -</span><br><span class="line"><span class="number">-3</span>  number  <span class="number">1</span></span><br><span class="line"><span class="number">-2</span>  <span class="string">"hello"</span> <span class="number">2</span></span><br><span class="line"><span class="number">-1</span> (void*)f <span class="number">3</span></span><br><span class="line">- - - - - - -</span><br><span class="line">     top</span><br></pre></td></tr></table></figure></p><p>And the Lua called C function <code>f(a, b, c)</code>, the Stack would be<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       | <span class="number">-3</span> <span class="number">-2</span> <span class="number">-1</span> |</span><br><span class="line">bottom |  a  b  c | top</span><br><span class="line">       |  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> |</span><br></pre></td></tr></table></figure></p><p>because the Lua push the parameters from left to right.</p><p>Second, we must know the Lua C API how to use the Stack, these informations are listed in <a href="https://www.lua.org/manual/5.4/manual.html" target="_blank" rel="noopener">Lua manual</a>.</p><p>Finally, we need know how to handle the errors with Lua C API. Again, these informations are listed in Lua manual.</p><h3 id="How-to-create-a-library"><a href="#How-to-create-a-library" class="headerlink" title="How to create a library"></a>How to create a library</h3><p>create C functions<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;lua.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;lauxlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lua code: hello("Billy")</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">say_hello</span><span class="params">(lua_State* L)</span></span>&#123;</span><br><span class="line">    <span class="comment">// get the parameter from the Stack</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name = luaL_checklstring(L, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">12</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">12</span>, <span class="string">"Hello %s"</span>, name);</span><br><span class="line">    <span class="comment">// push the return value to the Stack</span></span><br><span class="line">    lua_pushstring(L, buf);</span><br><span class="line">    <span class="comment">// tell Lua the function has only one return value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">luaopen_hello</span><span class="params">(lua_State* L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">fs</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"hello"</span>, say_hello&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    lua_newlib(L, fs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We can now compile it with gcc<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O2 -shared -fPIC `pkg-config lua --cflags --libs` -o hello.so</span><br></pre></td></tr></table></figure></p><p>and we can copy the hello.so to the Lua lib dir <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OR we can use luarocks to build and install the library, ```sudo luarocks make/build hello-1-0.rockspec```, but this is out of my article now.</span><br><span class="line"></span><br><span class="line">We can now use hello library in Lua:</span><br><span class="line">```lua</span><br><span class="line">local hello = require &apos;hello&apos;</span><br><span class="line">print(hello.hello(&quot;Jim&quot;))</span><br></pre></td></tr></table></figure></p><p>When we want to use third parties library written in C, we can do it like this, now we take libvips for an example.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vips/vips.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lua code: open("/tmp/tmp1.png")</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vips_open</span><span class="params">(lua_State* L)</span></span>&#123;</span><br><span class="line">    VipsImage* img = vips_image_new_from_file(f, <span class="string">"access"</span>, VIPS_ACCESS_SEQUENTIAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!img)&#123;</span><br><span class="line">        vips_error_exit(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// because the img is struct VipsImage, this type is not supported in Lua, in other words, this is an user data, we use light user data because we did not create img with lua_newuserdata</span></span><br><span class="line">    lua_pushlightuserdata(L, img);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lua code: save(img, "/tmp/tmp2.png")</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vips_save</span><span class="params">(lua_State* L)</span></span>&#123;</span><br><span class="line">    VipsImage* img = lua_touserdata(L, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* f = luaL_checkstring(L, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (vips_image_write_to_file(img, f, <span class="literal">NULL</span>))&#123;</span><br><span class="line">        vips_error_exit(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">luaopen_hello</span><span class="params">(lua_State* L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">luaL_Reg</span> <span class="title">fs</span>[] = &#123;</span></span><br><span class="line">        &#123;<span class="string">"hello"</span>, say_hello&#125;,</span><br><span class="line">        &#123;<span class="string">"open"</span>, vips_open&#125;,</span><br><span class="line">        &#123;<span class="string">"save"</span>, vips_save&#125;</span><br><span class="line">        &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    lua_newlib(L, fs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (VIPS_INIT(<span class="string">"hello"</span>))&#123;</span><br><span class="line">        vips_error_exit(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We compile it with gcc:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O2 -shared -fPIC `pkg-config lua --cflags --libs` `pkgconfig vips --cflags --libs` -o hello.so</span><br></pre></td></tr></table></figure></p><p>Because we use libvips library, we need specify the libvips’ header files and dynamic lib path</p><p>now we can use libvips in lua:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> hello = <span class="built_in">require</span> <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">print</span>(hello.hello(<span class="string">"vips"</span>))</span><br><span class="line"><span class="keyword">local</span> test_img = hello.<span class="built_in">open</span>(<span class="string">"./test.png"</span>)</span><br><span class="line">hello.save(test_img, <span class="string">"./test-copy.png"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="How-to-write-a-application-with-emmbeded-Lua"><a href="#How-to-write-a-application-with-emmbeded-Lua" class="headerlink" title="How to write a application with emmbeded Lua?"></a>How to write a application with emmbeded Lua?</h3><p>That’s simple, read the <code>main</code> function in <code>lua.c</code>. Attention: call Lua C API in Lua protected mode as you can as possible, that is say, do your script in the function that started by lua_pcall, this way would prevent many strange crash, mem leaks etc, therefore, Lua recommend us use lua_newuserdata instead of light userdata, the Lua’s GC will collect the userdata carefully but skip light userdata at all.</p><h3 id="Why-do-I-need-to-know-this"><a href="#Why-do-I-need-to-know-this" class="headerlink" title="Why do I need to know this?"></a>Why do I need to know this?</h3><p>um…. because the libvips lua binding uses luajit which is legacy(it is rubbish nowadays, it do not support Lua5.3, Lua5.4, yes), and lua-cjson can’t compile with Lua5.4, and maybe other libs are outdated without maintainer etc. It’s a big pain, right? But now, I can write a simple binding for myself, right? We can heal ourself freely.</p>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
            <tag> c </tag>
            
            <tag> api </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Business Talks Principle</title>
      <link href="/2021/01/04/business-talks-principle/"/>
      <url>/2021/01/04/business-talks-principle/</url>
      
        <content type="html"><![CDATA[<p>购买商品的唯一原则是 <code>在保持中意商品不变的前提下，保持预期价位恒定，成则矣，不成则走</code><br>在这样的原则下，谈判没有面子的问题，无论什么都可以谈，不要在心里说，我出的价格，我要的东西，对方会不会拒绝？<code>谈判时不关乎面子，只关乎商品和价格。</code><br>在这个原则下，是否购买商品，只有两个关键因素需要考虑：</p><ul><li>你是否中意这个商品</li><li>这个商品的价格是否在你的预期之内</li></ul><p>一、是否中意这个商品<br>这个为什么重要？如果你不喜欢这个商品，那么无论多么便宜，你买回去以后，只会越看越生气，后悔不迭。</p><ul><li>我曾经需要购买一台笔记本，预算是 3600 左右，想要的显卡是 GT640，结果去买的时候觉得有点儿贵（不止3600），贪便宜买了 GT610 的机器（<code>这里没有保持中意的商品不变</code>），3100 左右，回去以后，越用越糟心，心里的不爽就渐渐增加，后悔的不行，但是已经购买了，不可能退货，那样损失感觉会更大，一直忍到实在是带不动 UE4 的时候，卖二手 1800，算下来是亏死了。</li><li>买房子的时候，也是瞎看，不知道该看哪些东西，（现在知道需要看的是 1、物业管理水平，这个涉及到小区是否安全，生活是否方便，比如电梯安全，高空抛物，停车位之类的；2、房子的装修水平，不应当贪图前房东的家具，那些不值钱，值钱的是下水道的设计方式，各种线路管道的安排，这些东西如果之前被破坏了，要换就非常麻烦；3、房子的布局，采光，空调安装是否方便，像我这个装个空调还得从邻居家走，就非常糟糕；4、小区周边环境，包括商业圈，学校，医院等），然后听了中介瞎忽悠，说这里以后有地铁，我一看地图，完全没有，他用的不知道是某度地图还是某德地图，居然还真有一条<code>计划线</code>，事实上是假的，不知道当初怎么能画上！！事实证明那条线是延长线，关键是离我这儿还变远了，之前走路五分钟，现在要十五分钟！我回去以后，还心心念念的觉得有地铁挺值得，然后第二天接到电话就急不可耐的签了约，看房子也是随意看，<code>觉得细看的话，房东会不高兴</code>，其实啥也看不来，中介还说这个油烟机是新的，我居然傻乎乎的点头，觉得真划算！收到房以后，才发现家具电器都是垃圾，下水道管子被破坏，马桶也是垃圾还反味，空调安装不了，卫生间瓷砖还脱片，至于物业，那真是呵呵了，电梯三天两头坏，几年了，周边小区都涨了好几千了，我们小区掉了好几千…… 更重要的是，去公司的路程还变远了。</li></ul><p>我们需要怎么看商品才能确定是否中意呢？要如何确定我们的中意不是被欺骗呢？在我们不是相关领域的专业人士的前提下，最需要<code>货比三家</code>。货比三家还有一个好处就是可以大致获得行情价格，这个有助于后续修正我们的预期价格。这里的货比三家真的是要三家以上，不能怕麻烦，说，来一趟不容易，打车真麻烦等，要按照随机采样的标准，三家的分布应该比较广泛，或者说三家的距离应该足够远。至于专业人士，也应该自己查相关参数，货比三家，实际体验一下。</p><ul><li>比如买房子，可以找不同的中介看同一套房子，也可以看不同区域的房子，这样可以了解不同区域的行情，房子的不同布局，周边环境的变化等等。不看不同区域的房子，会因为周边环境变化不大以至于误导你对房子的预期，让你觉得房子应该就是这样，以至于上当。至于我，房子没看好，还被所谓的地铁给欺骗了，这个就非常不应该了。</li><li>比如买车，更需要找不同的 4S 店去看同一款车，试驾同一款车，这样可以在不同的路面环境下体验到这款车的实际表现，对你的决策是有巨大意义的，并且和不同的销售谈价格，可以大致知道底价在哪里。至于我，看车的时候先看的 A 级车，到处瞎跑，发现车不好，然后决定看 君威，迈锐宝，星锐，结果在网上联系了两个 星锐 的卖家，一个说没有优惠，一个说有，感觉没啥意思，就先看了 君威，再想去看 迈锐宝，发现 4S 店居然没人，好不容易跑到另一个汽车城，直接就看了 君威，连试驾都没有，就因为对方给送了点东西，就下定了，唉。我倒不是说 君威 不好，而是价格问题，可以谈得低的。</li></ul><p><code>行事急躁的必要缺乏</code>，这里的急躁就是指，临时决定，没有货比三家，没有认真思考过自己要什么，完全不懂这个事物的优缺点，更不知道哪些是自己能接受的，哪些不能。在这样的情况下，做出决定，几乎都要后悔。</p><p>因此，所谓的中意商品，就是说，这个商品的特性，有哪些是你喜欢的，有哪些是你不喜欢的，对于这些不喜欢的特性，是否能接受，以及，是否存在满足你需要的其他商品，你喜欢的特性更多，你不喜欢的特性更少？只要体验了这些特性，你都能接受，那么就算中意了。接下来就是看价格了。</p><p>二、商品价格是否在预期之内<br>这个因素非常重要，毕竟经济学的一条基础理论就是 <code>价格下降，需求上升</code>。<br>在前期<code>货比三家</code>看商品的过程中，我们已经大致了解了行情，现在可以和己方团队商议一个预期价格，一旦商议完成，在和商家谈判的过程中，就不要自己去提升价格了，必须控制在我们的预期之内。<br>什么时候我们会自己去提升价格？在商家报了一个超高价的时候，我们砍价的时候就会觉得自己的预期价格好像有点儿低，不好意思砍，再加上商家给赠送一点儿东西，自己就觉得给个高一点的价格好像也可以。</p><ul><li>买房子的时候，如果对方不能给到我们的预期价格，我们可以中断谈判，不要因为不好意思之类的就接受了对方的报价。我当初想 80 万，对方坚持 85 万，他家人要 90 万，我自己本来已经中断了，结果后续中介来问一下，我居然觉得好不容易请假出来的，不签订合同的话，太亏了，结果就签了！！85 万。<code>价格必须控制在预期之内，否则中断谈判</code>。</li><li>买车的时候，我没有货比三家，虽然一开始有和家人商定 16 万的预期，但是后续订车的时候，就因为对方送了两次保养，底盘护板，脚垫贴膜啥的，我自己给的价格居然是上个 4S 店给的价格 16.2 万，再加了所谓的底盘装甲，行车记录仪，没有和家人商议，自己决定了。我对销售说，如果对方接受这个价格，我就可以当场下订。我家人说的一句话让我后悔不迭，“我们跑这么远，就是因为不能接受上一家的价格，现在你还自己出这个价，那我们还跑这么远干嘛”。可惜我死要面子，销售说这个价格他们的经理接受了，然后，你懂的。至于上一个 4S 店，在我订车以后，微信上的报价是 16.1，我…… 在报价的时候，我并没有要更多的赠品，保养，这也是极大的失策，事后跟销售要车模已经不可能要到了，完全没有意义。</li></ul><p>总之，商品你要中意，不中意的无论多便宜都不要买（事实上完全不便宜）。预期价格区间要恒定，不能在谈判的时候自己乱出价格。调整价格必须在谈判中断以后。赠品之类的也要在出价之前要好，出价后就不好要了，尤其是付定金以后，就完全没有机会了。<br>团队中必须要有冷静的人，尤其是外行，让他来锚定价格。比如你的妻子，不懂车的时候，告诉她我们的底价，她会坚决执行的，不会像我们这种半桶水，被销售拿点儿赠品就投降了。我们会自以为懂车，赠品看起来很值，就会乱了分寸。</p><p>最后，<code>货比三家，找到中意的商品，以中意的价格成交。</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> business </tag>
            
            <tag> talks </tag>
            
            <tag> 交易 </tag>
            
            <tag> 谈判 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Architecture</title>
      <link href="/2019/09/10/unity-architecture/"/>
      <url>/2019/09/10/unity-architecture/</url>
      
        <content type="html"><![CDATA[<h3 id="The-basic-unity3d-architecture"><a href="#The-basic-unity3d-architecture" class="headerlink" title="The basic unity3d architecture"></a>The basic unity3d architecture</h3><ul><li>Scene Graphic<ul><li>GameObject</li><li>Component</li></ul></li><li>Resources<ul><li>Prefab</li><li>Texture</li><li>Spine Animation</li><li>Texture Atlas</li><li>text</li><li>Script</li><li>etc.</li></ul></li></ul><h3 id="1-Scene-Graphic"><a href="#1-Scene-Graphic" class="headerlink" title="1, Scene Graphic"></a>1, Scene Graphic</h3><p>That every thing in the Scene is <code>GameObject</code>, and the behaviour of the GameObject is <code>MonoBehaviour</code>, the script that can add to the GameObject as a <code>Component</code>.</p><p>If the GameObject is disabled in the Editor, the Components that has been added to it will not be called until we call <code>go.SetActive(true)</code> in other scripts. Therefore if you find the <code>SkeletonGraphic.AnimationState == null</code>, may be you have been disable it.</p><h3 id="2-Life-Cycle-of-a-Script-that-extends-MonoBehaviour"><a href="#2-Life-Cycle-of-a-Script-that-extends-MonoBehaviour" class="headerlink" title="2, Life Cycle of a Script that extends MonoBehaviour"></a>2, Life Cycle of a Script that extends MonoBehaviour</h3><p>If the GameObject is disabled in the editor, it will be silent and not be called, you can’t <code>GameObject.Find</code> it either.</p><p>Otherwise, the GameObject’s Script will be called after been <code>Instantiate</code></p><ul><li><code>SceneManager.LoadScene</code></li><li><code>Awake</code> called once time before destroyed</li><li><code>OnEnable</code> called when <code>SetActive(true)</code> or after <code>Instantiate</code></li><li><code>Start</code> called once time before destroyed</li><li><code>FixedUpdate</code> called one more time each frame, according to the Physics system</li><li><code>Update</code> called each frame</li><li><code>LateUpdate</code> called each frame after all script <code>Update</code></li><li><code>OnDisable</code> called when <code>SetActive(false)</code></li><li><code>OnDestroy</code> called when it <code>Object.Destroy</code> or <code>SceneManager.UnloadScene</code></li></ul><h3 id="3-Life-Cycle-of-a-Script-that-not-extend-MonoBehaviour"><a href="#3-Life-Cycle-of-a-Script-that-not-extend-MonoBehaviour" class="headerlink" title="3, Life Cycle of a Script that not extend MonoBehaviour"></a>3, Life Cycle of a Script that not extend MonoBehaviour</h3><p>Well, it’s life cycle is according to you, you let it die, it die, you let it live, it lives.</p><h3 id="4-How-to-move-GameObject-into-other-GameObject-for-Compositing-complex-object"><a href="#4-How-to-move-GameObject-into-other-GameObject-for-Compositing-complex-object" class="headerlink" title="4, How to move GameObject into other GameObject for Compositing complex object"></a>4, How to move GameObject into other GameObject for Compositing complex object</h3><p>Easy, <code>this.gameObject.transform.SetParent(otherGameObject.transform, false/true)</code></p><ul><li>false indicates this game object will move to other game object position, well, the <code>transform.localPosition = new Vector3(0, 0, 0)</code></li><li>true indicates this game object stay in origin position, like below<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var worldPos = this.gameObject.transform.position;</span><br><span class="line">this.gameObject.transform.SetParent(other.gameObject.transform, false);</span><br><span class="line">this.gameObject.transform.position = worldPos;</span><br></pre></td></tr></table></figure></li></ul><p>If the GameObject that created under Canvas, the transform is <code>RectTransform</code>, the <code>localPosition</code> is <code>anchoredPosition</code></p><h3 id="5-The-order-of-the-Scripts-in-the-Scene"><a href="#5-The-order-of-the-Scripts-in-the-Scene" class="headerlink" title="5, The order of the Scripts in the Scene"></a>5, The order of the Scripts in the Scene</h3><ul><li><p>The Components in one GameObject</p><p> it will be called one by one</p></li><li><p>The Components among many GameObjects</p><p>the order is not defined, but we know that all scripts will be <code>Awake</code> first and then <code>Start</code> etc. Therefore, we can initialize the Component itself in <code>Awake</code> and then interactive with other Components in/after <code>Start</code></p></li></ul><h3 id="6-The-best-practice-of-reference-GameObject-Resources-in-MonoBehaviour"><a href="#6-The-best-practice-of-reference-GameObject-Resources-in-MonoBehaviour" class="headerlink" title="6, The best practice of reference GameObject/Resources in MonoBehaviour"></a>6, The best practice of reference GameObject/Resources in MonoBehaviour</h3><ul><li><p>Static GameObject in the Scene</p><p>we can define <code>public</code> field in MonoBehaviour and add it to the GameObject and drag the corresponding target into the Component in the editor <code>Inspector</code></p></li><li><p>Dynamic GameObject created in runtime</p><p>we can do it like step 1 but we drag the prefab to the field, and then we will call <code>Instantiate(prefab)</code> to create GameObject, further more, we can create GameObject pool for reusing the GameObject without create it and destroy it again and again.</p></li><li><p>Don’t use <code>GameObject.Find</code>, if you have to, use <code>this.transform.Find</code> to find in children instead.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Architecture </tag>
            
            <tag> GameObject </tag>
            
            <tag> Component </tag>
            
            <tag> Scene Graphic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Exclude X86 So Files</title>
      <link href="/2019/05/18/android-exclude-x86-so-files/"/>
      <url>/2019/05/18/android-exclude-x86-so-files/</url>
      
        <content type="html"><![CDATA[<p>We need remove any dynamic library files such as x86, x86_64 in android for reduce APK file size.</p><p>That’s how we can do it:</p><p>Set <code>abiFilters</code> in file <code>build.gradle</code> that under application module</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters <span class="string">"arm64-v8a"</span>, <span class="string">"armeabi-v7a"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above configs will keep <code>arm64-v8a</code> and <code>armeabi-v7a</code>, and remove <code>x86</code>, <code>x86_64</code>, <code>mips</code> etc.</p><p>If you want to remove <code>x86</code>, <code>x86_64</code> in release mode only, you should move the above configs to <code>buildTypes</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;...&#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"arm64-v8a"</span>, <span class="string">"armeabi-v7a"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ABI filters </tag>
            
            <tag> x86 </tag>
            
            <tag> x86_64 </tag>
            
            <tag> armeabi </tag>
            
            <tag> mips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Hide Navigation Bar Automatically</title>
      <link href="/2019/03/10/android-hide-navigation-bar-automatically/"/>
      <url>/2019/03/10/android-hide-navigation-bar-automatically/</url>
      
        <content type="html"><![CDATA[<p>If you want to hide the navigation bar and use full screen area to draw your content, you can just do it with <code>view.setSystemUiVisibility</code> in function <code>onWindowFocusChanged</code> of class <code>Activity</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</span><br><span class="line">    <span class="keyword">if</span> (hasFocus) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> visibility;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">19</span>) &#123;</span><br><span class="line">            visibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="line">        &#125;</span><br><span class="line">        getWindow().getDecorView().setSystemUiVisibility(getWindow().getDecorView().getSystemUiVisibility() | visibility);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>The flag <code>View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</code> indicates that the layout content will draw behind the navigation bar</li><li>The flag <code>View.SYSTEM_UI_FLAG_LAYOUT_STABLE</code> indicates that the layout height will not changes when the system ui appear and disapper</li><li>The flag <code>View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY</code> indicates that the system ui will automatically disapper after it appear for seconds</li><li>The flag <code>View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</code> indicates that the navigation bar will be hidden</li><li>The final result<br><img src="auto-hide.gif" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Navigation Bar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Express With Redis</title>
      <link href="/2019/03/09/Node-js-Express-with-Redis/"/>
      <url>/2019/03/09/Node-js-Express-with-Redis/</url>
      
        <content type="html"><![CDATA[<ol><li>Install redis with <code>npm install redis --save</code></li><li><p>We require <code>redis</code> and <code>createClient</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>)</span><br><span class="line"><span class="keyword">var</span> redisconn = redis.createClient(<span class="number">6379</span>, <span class="string">'127.0.0.1'</span>)</span><br></pre></td></tr></table></figure></li><li><p>We can use the redis now</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">'test'</span></span><br><span class="line">redisconn.get(key, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'key '</span> + key + <span class="string">' is '</span> + value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>We can use redis in Express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = req.query.key</span><br><span class="line">    redisconn.get(key, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'key '</span> + key + <span class="string">' is '</span> + value)</span><br><span class="line">        res.send(value)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Express Base64 Decode</title>
      <link href="/2019/03/09/Node-js-express-base64-decode/"/>
      <url>/2019/03/09/Node-js-express-base64-decode/</url>
      
        <content type="html"><![CDATA[<p>let we have an url<br><code>http://www.test.com/api?data=YWN0aW9uPWRlbGV0ZSZ1aWQ9MjU0MzI=</code></p><ol><li><p>We can use <code>Buffer</code> to decode the data <code>Buffer.from(data, &#39;base64&#39;)</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = req.query.data</span><br><span class="line">    <span class="keyword">var</span> bytes = Buffer.from(data, <span class="string">'base64'</span>)</span><br><span class="line">    <span class="keyword">var</span> realQuery = bytes.toString()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> The <code>realQuery</code> is below<br> <img src="query-string.png" alt></p></li><li><p>Now we get the real query strings and we require Node.js module <code>querystring</code> to parse it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queryParser = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"><span class="keyword">var</span> jsonData = queryParser.parse(realQuery)</span><br><span class="line"><span class="built_in">console</span>.log(jsonData)</span><br></pre></td></tr></table></figure></li><li><p>The result<br><img src="base64-result.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> express </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Quick Start Guide</title>
      <link href="/2019/03/09/hexo-quick-start-guide/"/>
      <url>/2019/03/09/hexo-quick-start-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ol><li><p>Install hexo globally</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>Create your site</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>Configurations see <a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">Configuration</a></p></li><li><p>Create post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new my-post-title</span><br></pre></td></tr></table></figure></li></ol><p>This command will create a file named with <code>my-post-title.md</code> in folder <code>source\\_posts</code></p><ol start="5"><li>Deploy the site to github<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure></li></ol><h2 id="FIX"><a href="#FIX" class="headerlink" title="FIX"></a>FIX</h2><ol><li><p>The theme styles are changed but not regenerate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure></li><li><p>Code is not support <code>shell</code> language, you can set it with <code>bash</code> as well</p></li><li><p>Hexo only support inline code with format ``code``</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guide </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Express Simple Guide</title>
      <link href="/2019/03/08/nodejs-express-simple/"/>
      <url>/2019/03/08/nodejs-express-simple/</url>
      
        <content type="html"><![CDATA[<h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ol><li><p>Create a folder, eg. <code>server</code><br><img src="create-folder.png" alt></p></li><li><p>Enter folder <code>server</code> and init nodejs project<br><img src="init-project.png" alt></p></li><li><p>Install <code>express</code> with <code>npm install express --save</code><br><img src="express-installed.png" alt></p></li><li><p>Open folder <code>server</code> in VSCode<br><img src="open-vscode.png" alt></p></li><li><p>Create <code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// http://127.0.0.1/api?abc=123</span></span><br><span class="line">    response.send(request.query)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">80</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"runing at 80"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Start Running<br><img src="start-running.png" alt><br><img src="running.png" alt><br><img src="result.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> express </tag>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layabox Engine Mouse as Icon</title>
      <link href="/2019/01/28/laya-animation-mouse-icon/"/>
      <url>/2019/01/28/laya-animation-mouse-icon/</url>
      
        <content type="html"><![CDATA[<h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h2><p>replace mouse pointer with images<br><img src="hit-animation.gif" alt title="hit animation"></p><ol><li><p>Create UI<br>we create an ui scene in editor with embed mode and View type<br><img src="create-ui.png" alt title="create ui"></p></li><li><p>Create Image node<br><img src="create-image.png" alt title="create image"></p></li><li><p>Set Image Skin<br>set the Image skin to the mouse icon image file<br><img src="set-skin.png" alt title="set skin"></p></li><li><p>Create Animation<br>create the animation with the Image node rotation from 20 -&gt; -20 -&gt; 20<br><img src="hit-animation.png" alt title="hit animation"></p></li><li><p>Publish UI<br>press F12 to publish the ui file src/ui/layaMaxUI.ts</p></li><li><p>Create the hammer class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ui&#125; <span class="keyword">from</span> <span class="string">"./ui/layaMaxUI"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HammerUI</span> <span class="keyword">extends</span> <span class="title">ui</span>.<span class="title">hammerUI</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>() &#123; <span class="keyword">super</span>(); &#125;</span><br><span class="line">    </span><br><span class="line">    onEnable(): <span class="keyword">void</span> &#123;</span><br><span class="line">        Laya.Mouse.hide();</span><br><span class="line">        Laya.stage.on(Laya.Event.MOUSE_MOVE, <span class="keyword">this</span>, <span class="keyword">this</span>.onMouseMove);</span><br><span class="line">        Laya.stage.on(Laya.Event.MOUSE_DOWN, <span class="keyword">this</span>, <span class="keyword">this</span>.onMouseDown);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMouseDown()&#123;</span><br><span class="line">        <span class="keyword">this</span>.hit.play(<span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMouseMove()&#123;</span><br><span class="line">        <span class="keyword">this</span>.pos(Laya.stage.mouseX - <span class="keyword">this</span>.width/<span class="number">2</span>, Laya.stage.mouseY - <span class="keyword">this</span>.height/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onDisable(): <span class="keyword">void</span> &#123;</span><br><span class="line">        Laya.Mouse.show();</span><br><span class="line">        Laya.stage.off(Laya.Event.MOUSE_DOWN, <span class="keyword">this</span>, <span class="keyword">this</span>.onMouseDown);</span><br><span class="line">        Laya.stage.off(Laya.Event.MOUSE_MOVE, <span class="keyword">this</span>, <span class="keyword">this</span>.onMouseMove);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Use it<br>and we can add the HammerUI to the Laya.stage and it works.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laya.stage.addChild(<span class="keyword">new</span> HammerUI());</span><br></pre></td></tr></table></figure></li><li><p>Final result<br><img src="final-result.gif" alt title="final result"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Layabox Engine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layabox </tag>
            
            <tag> game engine </tag>
            
            <tag> mouse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About Me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>I am a developer.<br>Any question? Please feel free to contact hualin at joys.mobi</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
